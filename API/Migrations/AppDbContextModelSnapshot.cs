// <auto-generated />
using System;
using API.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace API.Migrations
{
	[DbContext(typeof(AppDbContext))]
	partial class AppDbContextModelSnapshot : ModelSnapshot
	{
		protected override void BuildModel(ModelBuilder modelBuilder)
		{
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 64)
                .HasAnnotation("ProductVersion", "6.0.0-preview.4.21253.1");

            modelBuilder.Entity("API.Entities.AppRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

						b.HasKey("Id");

						b.HasIndex("NormalizedName")
											.IsUnique()
											.HasDatabaseName("RoleNameIndex");

						b.ToTable("AspNetRoles");
					});

            modelBuilder.Entity("API.Entities.AppUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Avatar")
                        .HasColumnType("longtext");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("ResetPasswordToken")
                        .HasColumnType("longtext");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

						b.HasKey("Id");

						b.HasIndex("NormalizedEmail")
											.HasDatabaseName("EmailIndex");

						b.HasIndex("NormalizedUserName")
											.IsUnique()
											.HasDatabaseName("UserNameIndex");

						b.ToTable("AspNetUsers");
					});

            modelBuilder.Entity("API.Entities.AppUserRole", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

						b.HasKey("UserId", "RoleId");

						b.HasIndex("RoleId");

						b.ToTable("AspNetUserRoles");
					});

            modelBuilder.Entity("API.Entities.AppUserTeam", b =>
                {
                    b.Property<int>("AppUserId")
                        .HasColumnType("int");

                    b.Property<string>("TeamId")
                        .HasColumnType("varchar(255)");

						b.HasKey("AppUserId", "TeamId");

						b.HasIndex("TeamId");

						b.ToTable("AppUserTeams");
					});

            modelBuilder.Entity("API.Entities.Building", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Address")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("Buildings");
                });

            modelBuilder.Entity("API.Entities.Room", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("BuildingId")
                        .HasColumnType("longtext");

                    b.Property<int>("Capacity")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("Rooms");
                });

            modelBuilder.Entity("API.Entities.Team", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

						b.Property<DateTime>("CreatedAt")
											.HasColumnType("timestamp without time zone");

						b.Property<string>("Name")
											.HasColumnType("text");

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

						b.Property<string>("BuildingId")
											.HasColumnType("text");

						b.Property<int>("Capacity")
											.HasColumnType("integer");

						b.Property<DateTime>("CreatedAt")
											.HasColumnType("timestamp without time zone");

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

			modelBuilder.Entity("API.Entities.Team", b =>
					{
						b.Property<int>("Id")
											.ValueGeneratedOnAdd()
											.HasColumnType("integer")
											.HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

						b.Property<string>("Name")
											.HasColumnType("text");

						b.HasKey("Id");

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

						b.Property<int>("RoleId")
											.HasColumnType("integer");

						b.HasKey("Id");

						b.HasIndex("RoleId");

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Value")
                        .HasColumnType("longtext");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("API.Entities.AppUserRole", b =>
                {
                    b.HasOne("API.Entities.AppRole", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

						b.Property<int>("UserId")
											.HasColumnType("integer");

						b.HasKey("Id");

						b.HasIndex("UserId");

						b.ToTable("AspNetUserClaims");
					});

			modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
					{
						b.Property<string>("LoginProvider")
											.HasColumnType("text");

						b.Property<string>("ProviderKey")
											.HasColumnType("text");

						b.Property<string>("ProviderDisplayName")
											.HasColumnType("text");

						b.Property<int>("UserId")
											.HasColumnType("integer");

						b.HasKey("LoginProvider", "ProviderKey");

						b.HasIndex("UserId");

						b.ToTable("AspNetUserLogins");
					});

			modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
					{
						b.Property<int>("UserId")
											.HasColumnType("integer");

						b.Property<string>("LoginProvider")
											.HasColumnType("text");

						b.Property<string>("Name")
											.HasColumnType("text");

						b.Property<string>("Value")
											.HasColumnType("text");

						b.HasKey("UserId", "LoginProvider", "Name");

						b.ToTable("AspNetUserTokens");
					});

			modelBuilder.Entity("API.Entities.AppUserRole", b =>
					{
						b.HasOne("API.Entities.AppRole", "Role")
											.WithMany("UserRoles")
											.HasForeignKey("RoleId")
											.OnDelete(DeleteBehavior.Cascade)
											.IsRequired();

						b.HasOne("API.Entities.AppUser", "User")
											.WithMany("UserRoles")
											.HasForeignKey("UserId")
											.OnDelete(DeleteBehavior.Cascade)
											.IsRequired();

						b.Navigation("Role");

						b.Navigation("User");
					});

			modelBuilder.Entity("API.Entities.AppUserTeam", b =>
					{
						b.HasOne("API.Entities.AppUser", "User")
											.WithMany("AppUserTeams")
											.HasForeignKey("AppUserId")
											.OnDelete(DeleteBehavior.Cascade)
											.IsRequired();

						b.HasOne("API.Entities.Team", "Team")
											.WithMany("AppUserTeams")
											.HasForeignKey("TeamId")
											.OnDelete(DeleteBehavior.Cascade)
											.IsRequired();

						b.Navigation("Team");

						b.Navigation("User");
					});

			modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
					{
						b.HasOne("API.Entities.AppRole", null)
											.WithMany()
											.HasForeignKey("RoleId")
											.OnDelete(DeleteBehavior.Cascade)
											.IsRequired();
					});

			modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
					{
						b.HasOne("API.Entities.AppUser", null)
											.WithMany()
											.HasForeignKey("UserId")
											.OnDelete(DeleteBehavior.Cascade)
											.IsRequired();
					});

			modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
					{
						b.HasOne("API.Entities.AppUser", null)
											.WithMany()
											.HasForeignKey("UserId")
											.OnDelete(DeleteBehavior.Cascade)
											.IsRequired();
					});

			modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
					{
						b.HasOne("API.Entities.AppUser", null)
											.WithMany()
											.HasForeignKey("UserId")
											.OnDelete(DeleteBehavior.Cascade)
											.IsRequired();
					});

			modelBuilder.Entity("API.Entities.AppRole", b =>
					{
						b.Navigation("UserRoles");
					});

			modelBuilder.Entity("API.Entities.AppUser", b =>
					{
						b.Navigation("AppUserTeams");

						b.Navigation("UserRoles");
					});

			modelBuilder.Entity("API.Entities.Team", b =>
					{
						b.Navigation("AppUserTeams");
					});
#pragma warning restore 612, 618
		}
	}
}
